generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String?
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  companyId       Int?
  Token           Token[]
  company         Company? @relation(fields: [companyId], references: [id])
}

model Company {
  id         Int         @id @default(autoincrement())
  name       String
  detail     String?
  logo       String?
  websiteUrl String?
  planId     Int?
  ratio      Float?      @default(0)
  reviews    Int?        @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Plan       Plan?       @relation(fields: [planId], references: [id])
  Products   Product[]
  Promotions Promotion[]
  Users      User[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Products    Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String
  companyId   Int
  ratio       Float    @default(0)
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  company     Company  @relation(fields: [companyId], references: [id])
  Reviews     Review[]
}

model Review {
  id          Int      @id @default(autoincrement())
  email       String
  name        String
  productId   Int
  ratio       Float
  feedback    String
  marketplace String
  customerId  Int
  Customer    Customer @relation(fields: [customerId], references: [id])
  Product     Product  @relation(fields: [productId], references: [id])
}

model Customer {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String
  reviews Int
  ratio   Float
  Reviews Review[]
}

model Plan {
  id          Int       @id @default(autoincrement())
  name        String
  price       Float
  description String?
  planType    PlanType  @default(GOLD)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Companies   Company[]
}

model Promotion {
  id            Int           @id @default(autoincrement())
  title         String
  image         String
  promotionType PromotionType
  description   String
  companyId     Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  company       Company       @relation(fields: [companyId], references: [id])
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
}

enum Marketplace {
  US
  CA
  MX
  GB
  FR
  DE
  IT
  ES
  IN
  JP
  NL
  SE
  AU
  BR
  SG
  TR
  SA
  AE
  PL
  EG
  ZA
}

enum PlanType {
  SILVER
  GOLD
  PLATINUM
}

enum PromotionType {
  GIFT_CARD
  DISCOUNT_CODE
  FREE_PRODUCT
  DIGITAL_DOWNLOAD
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
