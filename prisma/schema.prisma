generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int        @id @default(autoincrement())
  email                String        @unique
  name                 String?
  password             String
  stripeCustomerId     String?       @unique // Add this field to store the Stripe customer ID
  firstName            String?
  stripeSubscriptionId  String?   @unique // Make this optional
  currentPeriodEnd      DateTime? // Make this optional
  lastName             String?
  role                 Role          @default(USER)
  isEmailVerified      Boolean       @default(false)
  emailVerificationToken String?
  emailVerificationTokenExpires DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  companyId            Int?
  Token                Token[]
  company              Company?      @relation(fields: [companyId], references: [id])
  subscriptions        Subscription[] @relation("UserSubscriptions")
  payments             Payment[]

  @@index([companyId])
}

model Company {
  id            Int            @id @default(autoincrement())
  name          String?
  detail        String?
  logo          String?
  websiteUrl    String?
  planId        Int?
  ratio         Float?         @default(0)
  reviews       Int?           @default(0)
  metaPixelId   String?        // Meta Pixel ID for GOLD and PLATINUM plans
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Plan          Plan?          @relation(fields: [planId], references: [id])
  Products      Product[]
  Promotions    Promotion[]
  Users         User[]
  campaigns     Campaign[]
  subscriptions Subscription[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Products    Product[]
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  image       String
  asin        String?    @unique
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  ratio       Float      @default(0)
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Reviews     Review[]
  Campaigns   Campaign[]

  @@index([companyId])
}

model Review {
  id           Int          @id @default(autoincrement())
  email        String
  name         String
  productId    Int
  ratio        Float
  feedback     String
  marketplace  String
  customerId   Int
  orderNo      String?
  feedbackDate DateTime     @default(now())
  promotionId  Int?
  campaignId   Int?
  status       ReviewStatus @default(PENDING)
  Customer     Customer     @relation(fields: [customerId], references: [id])
  Product      Product      @relation(fields: [productId], references: [id])
  Promotion    Promotion?   @relation(fields: [promotionId], references: [id])
  Campaign     Campaign?    @relation(fields: [campaignId], references: [id])
}

model Customer {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String
  reviews Int
  ratio   Float
  Reviews Review[]
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  price         Float
  description   String?
  planType      PlanType        @default(GOLD)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Companies     Company[]
  subscriptions Subscription[]
}

model Promotion {
  id            Int           @id @default(autoincrement())
  title         String
  image         String
  promotionType PromotionType
  description   String
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     Int
  isActive      CampaignStatus @default(YES)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Campaigns     Campaign[]
  Reviews       Review[]

  // GIFT_CARD specific fields
  giftCardDeliveryMethod DeliveryMethod? // SHIP or DIGITAL

  // DISCOUNT_CODE specific fields
  approvalMethod ApprovalMethod? // MANUAL or AUTOMATIC
  codeType       CodeType? // SAME_FOR_ALL or SINGLE_USE
  couponCodes    String[] // Array of coupon codes

  // FREE_PRODUCT specific fields (fixed as per your requirement)
  freeProductDeliveryMethod DeliveryMethod? @default(SHIP)
  freeProductApprovalMethod ApprovalMethod? @default(MANUAL)

  // DIGITAL_DOWNLOAD specific fields
  downloadableFileUrl   String? // URL or path to the downloadable file
  digitalApprovalMethod ApprovalMethod? // MANUAL or AUTOMATIC

  @@index([companyId])
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
}

enum Marketplace {
  US
  CA
  MX
  GB
  FR
  DE
  IT
  ES
  IN
  JP
  NL
  SE
  AU
  BR
  SG
  TR
  SA
  AE
  PL
  EG
  ZA
}

enum PlanType {
  SILVER
  GOLD
  PLATINUM
}

enum PromotionType {
  GIFT_CARD
  DISCOUNT_CODE
  FREE_PRODUCT
  DIGITAL_DOWNLOAD
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum CampaignStatus {
  YES
  NO
}

enum DeliveryMethod {
  SHIP
  DIGITAL
}

enum ApprovalMethod {
  MANUAL
  AUTOMATIC
}

enum CodeType {
  SAME_FOR_ALL
  SINGLE_USE
}

enum ReviewStatus {
  PENDING
  PROCESSED
  REJECTED
}

model Campaign {
  id           Int            @id @default(autoincrement())
  title        String
  isActive     CampaignStatus @default(YES)
  promotion    Promotion      @relation(fields: [promotionId], references: [id])
  promotionId  Int
  products     Product[]
  marketplaces Marketplace[]
  claims       Int            @default(0)
  ratio        Float          @default(0)
  company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  productIds   Int[]
  Reviews      Review[]

  @@index([companyId])
  @@index([promotionId])
}

model Subscription {
  id                  String             @id @default(cuid())
  userId              Int
  stripeSubscriptionId String            @unique
  status              SubscriptionStatus  @default(ACTIVE)
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation("UserSubscriptions", fields: [userId], references: [id])
  Payments            Payment[]
  company             Company?            @relation(fields: [companyId], references: [id])
  companyId           Int?
  plan                Plan?               @relation(fields: [planId], references: [id])
  planId              Int?

  @@index([stripeSubscriptionId])
  @@index([userId])
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
}

model Payment {
  id              String        @id @default(cuid())
  subscriptionId  String
  userId          Int
  amount          Float
  currency        String
  status          PaymentStatus   @default(PENDING)
  paidAt          DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscription    Subscription    @relation(fields: [subscriptionId], references: [id])
  user            User           @relation(fields: [userId], references: [id])

  @@index([subscriptionId])
  @@index([userId])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
